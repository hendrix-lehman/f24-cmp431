/*
 * This source file was generated by the Gradle 'init' task
 */
package com.lockerfish.fundamentals

class App {
  val greeting: String
    get() {
      if (name != null) {
        return "Hello, $name!"
      }
      return "Hello, Kotlin/Native!"
    }

  var name: String? = null

  fun hello(): Unit {
    println(greeting)
    return
  }

  // users of this function can pass in a value if they want
  fun eat(food: String = "apple") {
    println("eating $food")
  }

  // users of this function are REQUIRED to pass in a value
  fun sleep(hours: Int) {
    println("sleeping for $hours hours")
  }

  fun mix(num: Int, flag: Boolean, str: String = "abc", hours: Int = 8, lucky: Int) {
    println("num: $num, str: $str, flag: $flag, hours: $hours, lucky: $lucky")
  }

  // this function is not compact and is not idiomatic Kotlin
  fun add(a: Int, b: Int): Int {
    return a + b
  }

  // this function is compact and idiomatic Kotlin
  fun addCompact(a: Int, b: Int) = a + b

  // this function takes another function as a parameter
  fun thisFunctionTakesAnotherFunctionAsParameter(a: Int, b: Int, fn: (Int, Int) -> Int) {
    val result = fn(a, b)
    println("the result is $result")
  }

  // this function uses lambda expressions
  fun lambdaExpressions() {
    val sum = { a: Int, b: Int -> a + b }
    val result = sum(1, 2)
    println("the result is $result")
  }

  // this function returns a function
  fun returnsTheAddFunction(): (Int, Int) -> Int {
    return { a: Int, b: Int -> a + b }
  }

  fun returnsTheMultiplyFunction(): (Int, Int) -> Int {
    return { a: Int, b: Int -> a * b }
  }
}

fun main() {
  val app = App()

  app.eat()
  app.sleep(8)
  app.mix(1, true, lucky = 7)

  app.thisFunctionTakesAnotherFunctionAsParameter(5, 7, app::add)

  app.thisFunctionTakesAnotherFunctionAsParameter(3, 5, fun(a, b) = a * b)

  val addVariableFunction = app.returnsTheAddFunction()
  val sum = addVariableFunction(2, 4)
  println("the sum is $sum")

  val multiplyVariableFunction = app.returnsTheMultiplyFunction()
  val product = multiplyVariableFunction(2, 4)
  println("the product is $product")

  // val result = app.hello()
  // app.name = "Hendrix"
  // println(app.greeting)
  // println("the result is $result")
  //
  // val ok = if (1 == 0) 1 else "abc"
  //
  // println("the value of ok is $ok")
}
